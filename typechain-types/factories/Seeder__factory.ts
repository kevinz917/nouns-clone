/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Seeder, SeederInterface } from "../Seeder";

const _abi = [
  {
    inputs: [],
    name: "generateSeed",
    outputs: [
      {
        components: [
          {
            internalType: "uint48",
            name: "head",
            type: "uint48",
          },
          {
            internalType: "uint48",
            name: "body",
            type: "uint48",
          },
        ],
        internalType: "struct ISeeder.Seed",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102a9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063399da58514610030575b600080fd5b61003861004e565b6040516100459190610165565b60405180910390f35b6100566100cb565b60006001436100659190610180565b40604051602001610076919061014a565b6040516020818303038152906040528051906020012060001c90506040518060400160405280600a836100a991906101e4565b65ffffffffffff168152602001600b831665ffffffffffff1681525091505090565b6040518060400160405280600065ffffffffffff168152602001600065ffffffffffff1681525090565b610106610101826101b4565b6101da565b82525050565b604082016000820151610122600085018261013b565b506020820151610135602085018261013b565b50505050565b610144816101c8565b82525050565b600061015682846100f5565b60208201915081905092915050565b600060408201905061017a600083018461010c565b92915050565b600061018b826101be565b9150610196836101be565b9250828210156101a9576101a8610215565b5b828203905092915050565b6000819050919050565b6000819050919050565b600065ffffffffffff82169050919050565b6000819050919050565b60006101ef826101c8565b91506101fa836101c8565b92508261020a57610209610244565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220660f4cd0411f05fe7bbfc3cb176709f89a0a95e021bca2cab7cee54380fd845964736f6c63430008040033";

type SeederConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SeederConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Seeder__factory extends ContractFactory {
  constructor(...args: SeederConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Seeder> {
    return super.deploy(overrides || {}) as Promise<Seeder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Seeder {
    return super.attach(address) as Seeder;
  }
  connect(signer: Signer): Seeder__factory {
    return super.connect(signer) as Seeder__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SeederInterface {
    return new utils.Interface(_abi) as SeederInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Seeder {
    return new Contract(address, _abi, signerOrProvider) as Seeder;
  }
}
